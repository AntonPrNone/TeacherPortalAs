@using TeacherPortalAs.Services
@using TeacherPortalAs.Models
@rendermode InteractiveWebAssembly
@inject ISubjectService SubjectService
@inject IJSRuntime JS

<link href="css/AdminComponents.css" rel="stylesheet" />

<div class="manager-container">
    <div class="manager-header">
        <h2>Управление предметами</h2>
        <button class="btn btn-primary btn-add" @onclick="() => ShowDialog(null)">
            <i class="fas fa-plus me-1"></i>Добавить предмет
        </button>
    </div>

    @if (subjects == null)
    {
        <p>Загрузка...</p>
    }
    else
    {
        <div class="table-container">
            <table class="data-table">
                <thead>
                    <tr>
                        <th>Название</th>
                        <th>Описание</th>
                        <th>Иконка</th>
                        <th>Действия</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var subject in subjects)
                    {
                        <tr>
                            <td>@subject.Name</td>
                            <td>@subject.Description</td>
                            <td><i class="@subject.IconClass"></i></td>
                            <td class="actions-cell">
                                <button class="action-button btn-edit" @onclick="() => ShowDialog(subject)">
                                    <i class="fas fa-edit"></i>
                                    <span>Изменить</span>
                                </button>
                                <button class="action-button btn-delete" @onclick="() => DeleteSubject(subject.Id)">
                                    <i class="fas fa-trash"></i>
                                    <span>Удалить</span>
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
</div>

@if (showDialog)
{
    <div class="dialog-overlay">
        <div class="dialog">
            <h3>@(editingSubject?.Id > 0 ? "Редактировать" : "Добавить") предмет</h3>
            
            <div class="form-group">
                <label for="name">Название:</label>
                <input id="name" class="form-control" @bind="editingSubject.Name" />
            </div>
            
            <div class="form-group">
                <label for="description">Описание:</label>
                <textarea id="description" class="form-control" @bind="editingSubject.Description"></textarea>
            </div>
            
            <div class="form-group">
                <label for="iconClass">Класс иконки:</label>
                <input id="iconClass" class="form-control" @bind="editingSubject.IconClass" />
                <small class="form-text text-muted">
                    Примеры: "fas fa-book", "fas fa-calculator", "fas fa-flask"
                    <a href="https://fontawesome.com/icons" target="_blank">Больше примеров</a>
                </small>
            </div>

            <div class="dialog-buttons">
                <button class="btn btn-secondary" @onclick="CloseDialog">Отмена</button>
                <button class="btn btn-primary" @onclick="SaveSubject">Сохранить</button>
            </div>
        </div>
    </div>
}

@code {
    private List<Subject>? subjects;
    private bool showDialog;
    private Subject editingSubject = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadSubjects();
    }

    private async Task LoadSubjects()
    {
        subjects = await SubjectService.GetSubjectsAsync();
    }

    private void ShowDialog(Subject? subject)
    {
        showDialog = true;
        editingSubject = subject != null ? new Subject
        {
            Id = subject.Id,
            Name = subject.Name,
            Description = subject.Description,
            IconClass = subject.IconClass
        } : new Subject();
    }

    private void CloseDialog()
    {
        showDialog = false;
        editingSubject = new();
    }

    private async Task SaveSubject()
    {
        try
        {
            if (string.IsNullOrWhiteSpace(editingSubject.Name))
            {
                await JS.InvokeVoidAsync("alert", "Введите название");
                return;
            }

            if (editingSubject.Id > 0)
            {
                await SubjectService.UpdateSubjectAsync(editingSubject);
            }
            else
            {
                await SubjectService.CreateSubjectAsync(editingSubject);
            }
            
            await LoadSubjects();
            CloseDialog();
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", $"Ошибка: {ex.Message}");
        }
    }

    private async Task DeleteSubject(int id)
    {
        if (await JS.InvokeAsync<bool>("confirm", 
            "Вы уверены, что хотите удалить этот предмет? Все связанные материалы также будут удалены."))
        {
            try
            {
                await SubjectService.DeleteSubjectAsync(id);
                await LoadSubjects();
            }
            catch (Exception ex)
            {
                await JS.InvokeVoidAsync("alert", $"Ошибка при удалении: {ex.Message}");
            }
        }
    }
} 