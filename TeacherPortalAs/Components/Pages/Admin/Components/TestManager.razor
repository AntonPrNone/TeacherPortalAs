@using TeacherPortalAs.Services
@using TeacherPortalAs.Models
@using System.Text.Json
@inject ITestService TestService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<div class="manager-container">
    <div class="manager-header">
        <h2>Управление тестами</h2>
        <button class="btn btn-primary btn-add" @onclick="() => ShowDialog(null)">
            <i class="fas fa-plus me-1"></i>Добавить тест
        </button>
    </div>

    @if (tests == null)
    {
        <div class="loading">Загрузка...</div>
    }
    else
    {
        <div class="table-responsive">
            <table class="data-table">
                <thead>
                    <tr>
                        <th>Название</th>
                        <th>Теги</th>
                        <th>Дата создания</th>
                        <th>Статус</th>
                        <th class="actions-header">Действия</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var test in tests.OrderByDescending(t => t.CreatedAt))
                    {
                        <tr>
                            <td>@test.Title</td>
                            <td>@test.Tags</td>
                            <td>@test.CreatedAt.ToString("dd.MM.yyyy")</td>
                            <td>
                                @if (test.IsPublished)
                                {
                                    <span class="badge bg-success">Опубликован</span>
                                }
                                else
                                {
                                    <span class="badge bg-secondary">Черновик</span>
                                }
                            </td>
                            <td class="actions-cell">
                                <button class="action-button btn-edit" @onclick="() => ShowDialog(test)">
                                    <i class="fas fa-edit"></i>
                                </button>
                                <button class="action-button btn-delete" @onclick="() => DeleteTest(test.Id)">
                                    <i class="fas fa-trash"></i>
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
</div>

@if (showDialog)
{
    <div class="dialog-overlay">
        <div class="dialog">
            <h3>@(editingTest.Id == 0 ? "Создание теста" : "Редактирование теста")</h3>

            <div class="form-group">
                <label for="title">Название теста</label>
                <input type="text" class="form-control" id="title" @bind="editingTest.Title" />
            </div>

            <div class="form-group">
                <label for="description">Описание</label>
                <textarea class="form-control" id="description" rows="3" @bind="editingTest.Description"></textarea>
            </div>

            <div class="form-group">
                <label for="imageUrl">URL изображения</label>
                <input type="text" class="form-control" id="imageUrl" @bind="editingTest.ImageUrl" />
            </div>

            <div class="form-group">
                <label for="tags">Теги (через запятую)</label>
                <input type="text" class="form-control" id="tags" @bind="editingTest.Tags" />
            </div>

            <div class="form-check mb-3">
                <input class="form-check-input" type="checkbox" id="isPublished" 
                       @bind="editingTest.IsPublished" />
                <label class="form-check-label" for="isPublished">
                    Опубликовать
                </label>
            </div>

            <div class="stages-editor">
                <h4>Вопросы теста</h4>
                
                @for (var questionIndex = 0; questionIndex < editingTest.Questions.Count; questionIndex++)
                {
                    var question = editingTest.Questions[questionIndex];
                    <div class="question-item">
                        <div class="d-flex align-items-start gap-3 mb-3">
                            <span class="question-number">Вопрос @(questionIndex + 1)</span>
                            <textarea class="form-control question-textarea"
                                    tabindex="@(questionIndex * 100 + 1)"
                                    @bind="question.Question"
                                    rows="2"></textarea>
                            <button class="btn btn-outline-danger"
                                    tabindex="-1"
                                    @onclick="() => RemoveQuestion(question)">
                                <i class="fas fa-trash"></i>
                            </button>
                        </div>

                        <div class="answers-container">
                            @foreach (var (answer, answerIndex) in question.Answers.Select((a, i) => (a, i)))
                            {
                                <div class="answer-item">
                                    <span class="answer-number me-2">@(answerIndex + 1).</span>
                                    <input type="checkbox"
                                          class="form-check-input me-2"
                                          tabindex="-1"
                                          @bind="answer.IsCorrect" />
                                    <textarea 
                                          class="form-control"
                                          tabindex="@(questionIndex * 100 + answerIndex + 2)"
                                          @bind="answer.Text"
                                          rows="2"></textarea>
                                    <div class="d-flex align-items-center">
                                        <button class="btn btn-outline-danger btn-sm"
                                              tabindex="-1"
                                              @onclick="() => RemoveAnswer(question, answer)">
                                            <i class="fas fa-times"></i>
                                        </button>
                                    </div>
                                </div>
                            }
                            <button class="btn btn-outline-secondary"
                                  tabindex="@(questionIndex * 100 + question.Answers.Count + 2)"
                                  @onclick="() => AddAnswer(question)">
                                <i class="fas fa-plus me-1"></i>Добавить ответ
                            </button>
                        </div>
                    </div>
                }
                
                <div class="add-buttons-container">
                    <button class="btn btn-outline-primary" @onclick="AddQuestion">
                        <i class="fas fa-plus me-2"></i>Добавить вопрос
                    </button>
                </div>
            </div>

            <div class="dialog-buttons">
                <button class="btn btn-secondary" @onclick="() => showDialog = false">Отмена</button>
                <button class="btn btn-primary" @onclick="SaveTest">Сохранить</button>
            </div>
        </div>
    </div>
}

@code {
    private List<Test>? tests;
    private bool showDialog;
    private Test currentTest = new();
    private Test editingTest = new();

    protected override async Task OnInitializedAsync()
    {
        tests = await TestService.GetTestsAsync(includeUnpublished: true);
    }

    private void ShowDialog(Test? test)
    {
        if (test == null)
        {
            currentTest = new Test();
        }
        else
        {
            currentTest = new Test
            {
                Id = test.Id,
                Title = test.Title,
                Description = test.Description,
                ImageUrl = test.ImageUrl,
                Tags = test.Tags,
                IsPublished = test.IsPublished,
                QuestionsJson = test.QuestionsJson,
                Questions = test.Questions.Select(q => new TestQuestion
                {
                    Question = q.Question,
                    Answers = q.Answers.Select(a => new TestAnswer
                    {
                        Text = a.Text,
                        IsCorrect = a.IsCorrect
                    }).ToList()
                }).ToList()
            };
        }
        editingTest = currentTest;
        showDialog = true;
    }

    private void CloseDialog()
    {
        showDialog = false;
        currentTest = new Test
        {
            Questions = new List<TestQuestion>()
        };
    }

    private async Task SaveTest()
    {
        try
        {
            if (editingTest.Id == 0)
            {
                await TestService.CreateTestAsync(editingTest);
            }
            else
            {
                await TestService.UpdateTestAsync(editingTest);
            }
            
            showDialog = false;
            await LoadTests();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving test: {ex.Message}");
            await JSRuntime.InvokeVoidAsync("alert", "Ошибка при сохранении теста");
        }
    }

    private void AddQuestion()
    {
        var questionIndex = editingTest.Questions.Count;
        editingTest.Questions.Add(new TestQuestion 
        { 
            Question = "",
            Answers = new List<TestAnswer>
            {
                new TestAnswer { Text = "", IsCorrect = true },
                new TestAnswer { Text = "", IsCorrect = false }
            }
        });
        StateHasChanged();
    }

    private void RemoveQuestion(TestQuestion question)
    {
        var index = editingTest.Questions.IndexOf(question);
        editingTest.Questions.Remove(question);
        StateHasChanged();
    }

    private void AddAnswer(TestQuestion question)
    {
        var questionIndex = editingTest.Questions.IndexOf(question);
        var answerIndex = question.Answers.Count;
        question.Answers.Add(new TestAnswer { Text = "", IsCorrect = false });
        StateHasChanged();
    }

    private void RemoveAnswer(TestQuestion question, TestAnswer answer)
    {
        var questionIndex = editingTest.Questions.IndexOf(question);
        var answerIndex = question.Answers.IndexOf(answer);
        question.Answers.Remove(answer);
        StateHasChanged();
    }

    private void UpdateQuestion(TestQuestion question, string newText)
    {
        question.Question = newText;
        StateHasChanged();
    }

    private void UpdateAnswer(TestAnswer answer, string newText)
    {
        answer.Text = newText;
        StateHasChanged();
    }

    private void UpdateAnswerCorrect(TestAnswer answer, bool isCorrect)
    {
        answer.IsCorrect = isCorrect;
        StateHasChanged();
    }

    private async Task LoadTests()
    {
        tests = await TestService.GetTestsAsync(includeUnpublished: true);
    }

    private async Task DeleteTest(int id)
    {
        if (await TestService.DeleteTestAsync(id))
        {
            await LoadTests();
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await JSRuntime.InvokeVoidAsync("makeTextareasAutoResize");
    }
} 