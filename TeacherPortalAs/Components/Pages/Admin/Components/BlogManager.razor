@using TeacherPortalAs.Services
@using TeacherPortalAs.Models
@using Microsoft.JSInterop
@using Microsoft.AspNetCore.Components.Web
@rendermode InteractiveWebAssembly
@inject IBlogService BlogService
@inject IJSRuntime JS

<link href="css/AdminComponents.css" rel="stylesheet" />

<div class="manager-container">
    <div class="manager-header">
        <h2>Управление блогом</h2>
        <button class="btn btn-primary btn-add" @onclick="() => ShowDialog(null)">
            <i class="fas fa-plus me-1"></i>Добавить пост
        </button>
    </div>

    @if (posts == null)
    {
        <p>Загрузка...</p>
    }
    else
    {
        <div class="table-responsive">
            <table class="data-table">
                <thead>
                    <tr>
                        <th>Заголовок</th>
                        <th>Дата создания</th>
                        <th>Статус</th>
                        <th class="actions-header">Действия</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var post in posts.OrderByDescending(p => p.CreatedAt))
                    {
                        <tr>
                            <td>@post.Title</td>
                            <td>@post.CreatedAt.ToString("dd.MM.yyyy")</td>
                            <td>
                                @if (post.IsPublished)
                                {
                                    <span class="badge bg-success">Опубликован</span>
                                }
                                else
                                {
                                    <span class="badge bg-secondary">Черновик</span>
                                }
                            </td>
                            <td class="actions-cell">
                                <button class="action-button btn-edit" @onclick="() => ShowDialog(post)">
                                    <i class="fas fa-edit"></i>
                                </button>
                                <button class="action-button btn-delete" @onclick="() => DeletePost(post.Id)">
                                    <i class="fas fa-trash"></i>
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
</div>

@if (showDialog)
{
    <div class="dialog-overlay">
        <div class="dialog blog-dialog">
            <h3>@(editingPost.Id == 0 ? "Создание поста" : "Редактирование поста")</h3>
            
            <div class="form-group">
                <label for="title">Заголовок</label>
                <input type="text" class="form-control" id="title" @bind="editingPost.Title" />
            </div>

            <div class="form-group">
                <label for="imageUrl">URL изображения</label>
                <input type="text" class="form-control" id="imageUrl" @bind="editingPost.ImageUrl" />
                <small class="form-text text-muted">Загрузите изображение на <a href="https://postimages.org/" target="_blank">postimages.org</a> и скопируйте ссылку на изображение</small>
            </div>
            
            @if (!string.IsNullOrEmpty(editingPost.ImageUrl))
            {
                <div class="image-preview mb-3">
                    <label>Предпросмотр изображения:</label>
                    <div class="preview-container">
                        <img src="@editingPost.ImageUrl" alt="Предпросмотр" />
                    </div>
                </div>
            }

            <div class="form-group">
                <label>Форматирование текста:</label>
                <div class="formatting-buttons">
                    <button type="button" class="format-btn" @onclick="@(e => InsertFormat("h2"))" title="Заголовок">
                        <i class="fas fa-heading"></i>
                    </button>
                    <button type="button" class="format-btn" @onclick="@(e => InsertFormat("b"))" title="Жирный">
                        <i class="fas fa-bold"></i>
                    </button>
                    <button type="button" class="format-btn" @onclick="@(e => InsertFormat("i"))" title="Курсив">
                        <i class="fas fa-italic"></i>
                    </button>
                    <button type="button" class="format-btn" @onclick="@(e => InsertFormat("ul"))" title="Список">
                        <i class="fas fa-list-ul"></i>
                    </button>
                </div>
                <textarea id="content" class="form-control content-editor" 
                          @bind="editingPost.Content" rows="10"></textarea>
            </div>

            <div class="form-check mb-3">
                <input class="form-check-input" type="checkbox" id="isPublished" 
                      @bind="editingPost.IsPublished" />
                <label class="form-check-label" for="isPublished">
                    Опубликовать
                </label>
            </div>

            <div class="dialog-buttons">
                <button class="btn btn-secondary" @onclick="CloseDialog">Отмена</button>
                <button class="btn btn-primary" @onclick="SavePost">Сохранить</button>
            </div>
        </div>
    </div>
}

@code {
    private List<Models.BlogPost>? posts;
    private bool showDialog;
    private Models.BlogPost currentPost = new();
    private Models.BlogPost editingPost = new();

    protected override async Task OnInitializedAsync()
    {
        posts = await BlogService.GetBlogPostsAsync(includeUnpublished: true);
    }

    private void ShowDialog(Models.BlogPost? post)
    {
        if (post == null)
        {
            currentPost = new Models.BlogPost();
        }
        else 
        {
            currentPost = new Models.BlogPost
            {
                Id = post.Id,
                Title = post.Title,
                Content = post.Content,
                ImageUrl = post.ImageUrl,
                IsPublished = post.IsPublished,
                CreatedAt = post.CreatedAt
            };
        }
        editingPost = currentPost;
        showDialog = true;
    }

    private void CloseDialog()
    {
        showDialog = false;
        currentPost = new Models.BlogPost();
    }

    private async Task LoadPosts()
    {
        posts = await BlogService.GetBlogPostsAsync(includeUnpublished: true);
        StateHasChanged();
    }

    private async Task SavePost()
    {
        try
        {
            if (editingPost.Id == 0)
            {
                await BlogService.CreateBlogPostAsync(editingPost);
            }
            else
            {
                await BlogService.UpdateBlogPostAsync(editingPost);
            }
            
            showDialog = false;
            await LoadPosts();
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", $"Ошибка при сохранении: {ex.Message}");
        }
    }

    private async Task DeletePost(int id)
    {
        if (await JS.InvokeAsync<bool>("confirm", "Вы уверены, что хотите удалить этот пост?"))
        {
            await BlogService.DeleteBlogPostAsync(id);
            await LoadPosts();
        }
    }

    private void InsertFormat(string tag)
    {
        string template = tag switch
        {
            "h2" => "<h2>Заголовок</h2>",
            "b" => "<b>жирный текст</b>",
            "i" => "<i>курсив</i>",
            "ul" => "<ul>\n  <li>пункт списка</li>\n  <li>пункт списка</li>\n</ul>",
            _ => string.Empty
        };

        currentPost.Content = string.IsNullOrEmpty(currentPost.Content) 
            ? template 
            : currentPost.Content + "\n" + template;
    }

    private async Task HandlePublishStateChanged()
    {
        if (currentPost.Id > 0) // Только для существующих постов
        {
            await BlogService.UpdateBlogPostAsync(currentPost);
            await LoadPosts();
        }
    }
} 